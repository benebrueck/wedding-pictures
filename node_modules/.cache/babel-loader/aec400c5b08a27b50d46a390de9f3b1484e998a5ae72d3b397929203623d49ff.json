{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar EventDispatcher = require(\"event-dispatcher\").EventDispatcher,\n  FileSystemScanner,\n  // constructor, function\n  FileSystemStrategy = require(__dirname + \"/FileSystemStrategy\"),\n  ScanningProcess = require(__dirname + \"/ScanningProcess\"),\n  ScanningStrategy = require(__dirname + \"/ScanningStrategy\"),\n  config = require(\"configuration-processor\").configurationProcessor,\n  p = require(\"path\"),\n  doScanDirectory,\n  // private, function\n  handleError,\n  // private, function\n  onCheckDirectory,\n  // private, function\n  onCheckFile,\n  // private, function\n  onShouldScanDirectory,\n  // private, function\n  onShouldScanFile,\n  // private, function\n  onShouldScanPath,\n  // private, function\n  sanitizeScanningProcess; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {bool} shouldScan\n * @return {void}\n */\ndoScanDirectory = function (fileSystemScanner, scanningProcess, path) {\n  fileSystemScanner.fileSystemStrategy.readDir(path, function (files, err) {\n    var i;\n    if (err) {\n      return void handleError(fileSystemScanner, path, scanningProcess, err);\n    }\n    if (files.length < 1) {\n      // branch stops on empty directory or file\n      return void scanningProcess.onPathDone(path);\n    }\n    for (i = 0; i < files.length; i += 1) {\n      files[i] = p.resolve(path, files[i]);\n    }\n    fileSystemScanner.scanPaths(files, scanningProcess);\n  });\n};\n\n/**\n * Some errors might not be catchable if asynchronous filesystem strategy is\n * used. They need to be handled in other way.\n *\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {string} path path that caused the error\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {object} err\n * @return {void}\n */\nhandleError = function (fileSystemScanner, path, scanningProcess, err) {\n  if (scanningProcess.isExpectingPath(path)) {\n    // this path is only expected to be visited and was not visited\n    // because whole branch failed; most probably path failed while\n    // executing \"stat\" and it was not possible to determine if this is a\n    // file or directory or something else\n    scanningProcess.unexpectPath(path);\n  } else {\n    // path was visited but something failed during internal processing\n    scanningProcess.onPathFailed(path);\n  }\n  fileSystemScanner.notifyErrorCaught(err, path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {string} path\n * @param {bool} isFound\n * @return {void}\n */\nonCheckDirectory = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, isFound) {\n  if (scanningProcess.shouldStop()) {\n    return void scanningProcess.onPathDone(path);\n  }\n  if (isFound) {\n    scanningProcess.onDirectoryFound(path);\n    fileSystemScanner.notifyDirectoryFound(path);\n  }\n  doScanDirectory(fileSystemScanner, scanningProcess, path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} isFound\n * @return {void}\n */\nonCheckFile = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, isFound) {\n  if (isFound && !scanningProcess.shouldStop()) {\n    scanningProcess.onFileFound(path);\n    fileSystemScanner.notifyFileFound(path);\n  }\n  scanningProcess.onPathDone(path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanDirectory = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n  if (shouldScan) {\n    fileSystemScanner.scanDirectory(path, scanningProcess);\n  } else {\n    scanningProcess.onDirectoryVisited(path);\n    scanningProcess.onPathDone(path);\n  }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanFile = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n  if (shouldScan) {\n    fileSystemScanner.scanFile(path, scanningProcess);\n  } else {\n    scanningProcess.onFileVisited(path);\n    scanningProcess.onPathDone(path);\n  }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanPath = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n  if (shouldScan) {\n    fileSystemScanner.scanPath(path, scanningProcess);\n  } else {\n    scanningProcess.unexpectPath(path);\n  }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nsanitizeScanningProcess = function (fileSystemScanner, scanningProcess) {\n  var options;\n  if (!(scanningProcess instanceof ScanningProcess)) {\n    options = scanningProcess || {};\n    scanningProcess = new ScanningProcess(options);\n  }\n  return scanningProcess;\n};\n\n/**\n * @auguments event-dispatcher/EventDispatcher\n * @constructor\n * @param {JsLoader/FileSystem/ScanningStrategy} scanningStrategy\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n */\nFileSystemScanner = function (scanningStrategy, fileSystemStrategy) {\n  EventDispatcher.call(this);\n  Object.defineProperty(this, \"fileSystemStrategy\", {\n    /**\n     * @return {JsLoader/FileSystem/ScanningStrategy}\n     */\n    get: function () {\n      return fileSystemStrategy;\n    },\n    /**\n     * @param {JsLoader/FileSystem/FileSystemStrategy} item\n     * @return {void}\n     * @throws {Error} if argument is invalid\n     */\n    set: function (item) {\n      if (!(item instanceof FileSystemStrategy)) {\n        throw new Error(\"Expected JsLoader/FileSystem/FileSystemStrategy as an argument.\");\n      }\n      fileSystemStrategy = item;\n    }\n  });\n  Object.defineProperty(this, \"scanningStrategy\", {\n    /**\n     * @return {JsLoader/FileSystem/ScanningStrategy}\n     */\n    get: function () {\n      return scanningStrategy;\n    },\n    /**\n     * @param {JsLoader/FileSystem/ScanningStrategy} item\n     * @return {void}\n     * @throws {Error} if argument is invalid\n     * @throws {Error} if given scanning strategy does not look for directory nor file\n     */\n    set: function (item) {\n      if (!(item instanceof ScanningStrategy)) {\n        throw new Error(\"Expected JsLoader/FileSystem/ScanningStrategy as an argument.\");\n      }\n      if (!scanningStrategy.isLookingForDirectory && !scanningStrategy.isLookingForFile) {\n        throw new Error(\"Given scanning strategy does not look for directory nor file.\");\n      }\n      scanningStrategy = item;\n    }\n  });\n  this.fileSystemStrategy = fileSystemStrategy;\n  this.scanningStrategy = scanningStrategy;\n};\nFileSystemScanner.prototype = Object.create(EventDispatcher.prototype);\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_ERROR_CAUGHT\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {object} err\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_ERROR_CAUGHT\", {\n  value: \"filesystemscanner.event.error.caught\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_DIRECTORY\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} directory\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_DIRECTORY\", {\n  value: \"filesystemscanner.event.found.directory\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_FILE\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} file\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_FILE\", {\n  value: \"filesystemscanner.event.found.file\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_PATH\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} path\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_PATH\", {\n  value: \"filesystemscanner.event.found.path\"\n});\n\n/**\n * @return {array}\n */\nFileSystemScanner.prototype.getSupportedEvents = function () {\n  return [FileSystemScanner.EVENT_ERROR_CAUGHT, FileSystemScanner.EVENT_FOUND_DIRECTORY, FileSystemScanner.EVENT_FOUND_FILE, FileSystemScanner.EVENT_FOUND_PATH];\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_DIRECTORY\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyDirectoryFound = function (path) {\n  this.dispatch(FileSystemScanner.EVENT_FOUND_DIRECTORY, {\n    directory: path,\n    dispatcher: this\n  });\n  this.notifyPathFound(path);\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_ERROR_CAUGHT\n * @param {object} err\n * @param {string|void} [path] path that caused the error\n * @return {void}\n */\nFileSystemScanner.prototype.notifyErrorCaught = function (err, path) {\n  this.dispatch(FileSystemScanner.EVENT_ERROR_CAUGHT, {\n    dispatcher: this,\n    err: err,\n    path: path\n  });\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_FILE\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyFileFound = function (path) {\n  this.dispatch(FileSystemScanner.EVENT_FOUND_FILE, {\n    file: path,\n    dispatcher: this\n  });\n  this.notifyPathFound(path);\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_PATH\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyPathFound = function (path) {\n  this.dispatch(FileSystemScanner.EVENT_FOUND_PATH, {\n    dispatcher: this,\n    path: path\n  });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanDirectory = function (path, scanningProcess) {\n  var cb;\n  scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n  if (scanningProcess.isDirectoryVisited(path)) {\n    return scanningProcess;\n  }\n  scanningProcess.onDirectoryVisited(path);\n  cb = onCheckDirectory.bind(null, this, scanningProcess, path, this.fileSystemStrategy);\n  this.scanningStrategy.checkDirectory(path, this.fileSystemStrategy, cb);\n  return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanFile = function (path, scanningProcess) {\n  var cb;\n  scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n  if (scanningProcess.isFileVisited(path)) {\n    return scanningProcess;\n  }\n  scanningProcess.onFileVisited(path);\n  if (!this.scanningStrategy.isLookingForFile) {\n    scanningProcess.onPathDone(path);\n    return scanningProcess;\n  }\n  cb = onCheckFile.bind(null, this, scanningProcess, path, this.fileSystemStrategy);\n  this.scanningStrategy.checkFile(path, this.fileSystemStrategy, cb);\n  return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanPath = function (path, scanningProcess) {\n  var cb,\n    fileSystemStrategy = this.fileSystemStrategy,\n    scanningStrategy = this.scanningStrategy,\n    that = this;\n  scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n  if (scanningProcess.isPathVisited(path)) {\n    return scanningProcess;\n  }\n  if (!scanningProcess.isExpectingPath(path)) {\n    scanningProcess.expectPath(path);\n  }\n  fileSystemStrategy.stat(path, function (stat, err) {\n    if (err) {\n      return void handleError(that, path, scanningProcess, err);\n    }\n    if (stat.isDirectory()) {\n      // even if scanning strategy does not look for directory,\n      // directories should be scanned\n      cb = onShouldScanDirectory.bind(null, that, scanningProcess, path, fileSystemStrategy);\n      scanningStrategy.shouldScanDirectory(path, fileSystemStrategy, cb);\n    } else if (stat.isFile()) {\n      // file check must be done because it may also be FIFO, socket,\n      // block device, character device, etc\n      if (scanningStrategy.isLookingForFile) {\n        cb = onShouldScanFile.bind(null, that, scanningProcess, path, fileSystemStrategy);\n        scanningStrategy.shouldScanFile(path, fileSystemStrategy, cb);\n      } else {\n        // filesystem scanner is looking only for directories and this\n        // path contains file at the end so this is a short visit\n        scanningProcess.onFileVisited(path);\n        scanningProcess.onPathDone(path);\n      }\n    }\n  });\n  return scanningProcess;\n};\n\n/**\n * @param {array} paths\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if paths list is not an array\n */\nFileSystemScanner.prototype.scanPaths = function (paths, scanningProcess) {\n  var cb, i;\n  paths = config.assertArrayEach(config.expectString(), paths);\n  scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n  for (i = 0; i < paths.length; i += 1) {\n    if (!scanningProcess.isPathVisited(paths[i]) && !scanningProcess.isExpectingPath(paths[i])) {\n      scanningProcess.expectPath(paths[i]);\n      cb = onShouldScanPath.bind(null, this, scanningProcess, paths[i], this.fileSystemStrategy);\n      this.scanningStrategy.shouldScanPath(paths[i], this.fileSystemStrategy, cb);\n    }\n  }\n  return scanningProcess;\n};\nmodule.exports = FileSystemScanner;","map":{"version":3,"names":["EventDispatcher","require","FileSystemScanner","FileSystemStrategy","__dirname","ScanningProcess","ScanningStrategy","config","configurationProcessor","p","doScanDirectory","handleError","onCheckDirectory","onCheckFile","onShouldScanDirectory","onShouldScanFile","onShouldScanPath","sanitizeScanningProcess","fileSystemScanner","scanningProcess","path","fileSystemStrategy","readDir","files","err","i","length","onPathDone","resolve","scanPaths","isExpectingPath","unexpectPath","onPathFailed","notifyErrorCaught","isFound","shouldStop","onDirectoryFound","notifyDirectoryFound","onFileFound","notifyFileFound","shouldScan","scanDirectory","onDirectoryVisited","scanFile","onFileVisited","scanPath","options","scanningStrategy","call","Object","defineProperty","get","set","item","Error","isLookingForDirectory","isLookingForFile","prototype","create","value","getSupportedEvents","EVENT_ERROR_CAUGHT","EVENT_FOUND_DIRECTORY","EVENT_FOUND_FILE","EVENT_FOUND_PATH","dispatch","directory","dispatcher","notifyPathFound","file","cb","isDirectoryVisited","bind","checkDirectory","isFileVisited","checkFile","that","isPathVisited","expectPath","stat","isDirectory","shouldScanDirectory","isFile","shouldScanFile","paths","assertArrayEach","expectString","shouldScanPath","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/scripts/JsLoader/FileSystem/FileSystemScanner.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar EventDispatcher = require(\"event-dispatcher\").EventDispatcher,\n    FileSystemScanner, // constructor, function\n    FileSystemStrategy = require(__dirname + \"/FileSystemStrategy\"),\n    ScanningProcess = require(__dirname + \"/ScanningProcess\"),\n    ScanningStrategy = require(__dirname + \"/ScanningStrategy\"),\n\n    config = require(\"configuration-processor\").configurationProcessor,\n    p = require(\"path\"),\n\n    doScanDirectory, // private, function\n    handleError, // private, function\n    onCheckDirectory, // private, function\n    onCheckFile, // private, function\n    onShouldScanDirectory, // private, function\n    onShouldScanFile, // private, function\n    onShouldScanPath, // private, function\n    sanitizeScanningProcess; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {bool} shouldScan\n * @return {void}\n */\ndoScanDirectory = function (fileSystemScanner, scanningProcess, path) {\n    fileSystemScanner.fileSystemStrategy.readDir(path, function (files, err) {\n        var i;\n\n        if (err) {\n            return void handleError(fileSystemScanner, path, scanningProcess, err);\n        }\n\n        if (files.length < 1) {\n            // branch stops on empty directory or file\n            return void scanningProcess.onPathDone(path);\n        }\n\n        for (i = 0; i < files.length; i += 1) {\n            files[i] = p.resolve(path, files[i]);\n        }\n\n        fileSystemScanner.scanPaths(files, scanningProcess);\n    });\n};\n\n/**\n * Some errors might not be catchable if asynchronous filesystem strategy is\n * used. They need to be handled in other way.\n *\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {string} path path that caused the error\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {object} err\n * @return {void}\n */\nhandleError = function (fileSystemScanner, path, scanningProcess, err) {\n    if (scanningProcess.isExpectingPath(path)) {\n        // this path is only expected to be visited and was not visited\n        // because whole branch failed; most probably path failed while\n        // executing \"stat\" and it was not possible to determine if this is a\n        // file or directory or something else\n        scanningProcess.unexpectPath(path);\n    } else {\n        // path was visited but something failed during internal processing\n        scanningProcess.onPathFailed(path);\n    }\n    fileSystemScanner.notifyErrorCaught(err, path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {string} path\n * @param {bool} isFound\n * @return {void}\n */\nonCheckDirectory = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, isFound) {\n    if (scanningProcess.shouldStop()) {\n        return void scanningProcess.onPathDone(path);\n    }\n\n    if (isFound) {\n        scanningProcess.onDirectoryFound(path);\n        fileSystemScanner.notifyDirectoryFound(path);\n    }\n\n    doScanDirectory(fileSystemScanner, scanningProcess, path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} isFound\n * @return {void}\n */\nonCheckFile = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, isFound) {\n    if (isFound && !scanningProcess.shouldStop()) {\n        scanningProcess.onFileFound(path);\n        fileSystemScanner.notifyFileFound(path);\n    }\n\n    scanningProcess.onPathDone(path);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanDirectory = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n    if (shouldScan) {\n        fileSystemScanner.scanDirectory(path, scanningProcess);\n    } else {\n        scanningProcess.onDirectoryVisited(path);\n        scanningProcess.onPathDone(path);\n    }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanFile = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n    if (shouldScan) {\n        fileSystemScanner.scanFile(path, scanningProcess);\n    } else {\n        scanningProcess.onFileVisited(path);\n        scanningProcess.onPathDone(path);\n    }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n * @param {bool} shouldScan\n * @return {void}\n */\nonShouldScanPath = function (fileSystemScanner, scanningProcess, path, fileSystemStrategy, shouldScan) {\n    if (shouldScan) {\n        fileSystemScanner.scanPath(path, scanningProcess);\n    } else {\n        scanningProcess.unexpectPath(path);\n    }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/FileSystemScanner} fileSystemScanner\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nsanitizeScanningProcess = function (fileSystemScanner, scanningProcess) {\n    var options;\n\n    if (!(scanningProcess instanceof ScanningProcess)) {\n        options = (scanningProcess || {});\n\n        scanningProcess = new ScanningProcess(options);\n    }\n\n    return scanningProcess;\n};\n\n/**\n * @auguments event-dispatcher/EventDispatcher\n * @constructor\n * @param {JsLoader/FileSystem/ScanningStrategy} scanningStrategy\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n */\nFileSystemScanner = function (scanningStrategy, fileSystemStrategy) {\n    EventDispatcher.call(this);\n\n    Object.defineProperty(this, \"fileSystemStrategy\", {\n\n        /**\n         * @return {JsLoader/FileSystem/ScanningStrategy}\n         */\n        get: function () {\n            return fileSystemStrategy;\n        },\n\n        /**\n         * @param {JsLoader/FileSystem/FileSystemStrategy} item\n         * @return {void}\n         * @throws {Error} if argument is invalid\n         */\n        set: function (item) {\n            if (!(item instanceof FileSystemStrategy)) {\n                throw new Error(\"Expected JsLoader/FileSystem/FileSystemStrategy as an argument.\");\n            }\n\n            fileSystemStrategy = item;\n        }\n\n    });\n\n    Object.defineProperty(this, \"scanningStrategy\", {\n\n        /**\n         * @return {JsLoader/FileSystem/ScanningStrategy}\n         */\n        get: function () {\n            return scanningStrategy;\n        },\n\n        /**\n         * @param {JsLoader/FileSystem/ScanningStrategy} item\n         * @return {void}\n         * @throws {Error} if argument is invalid\n         * @throws {Error} if given scanning strategy does not look for directory nor file\n         */\n        set: function (item) {\n            if (!(item instanceof ScanningStrategy)) {\n                throw new Error(\"Expected JsLoader/FileSystem/ScanningStrategy as an argument.\");\n            }\n\n            if (!scanningStrategy.isLookingForDirectory && !scanningStrategy.isLookingForFile) {\n                throw new Error(\"Given scanning strategy does not look for directory nor file.\");\n            }\n\n            scanningStrategy = item;\n        }\n\n    });\n\n    this.fileSystemStrategy = fileSystemStrategy;\n    this.scanningStrategy = scanningStrategy;\n};\nFileSystemScanner.prototype = Object.create(EventDispatcher.prototype);\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_ERROR_CAUGHT\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {object} err\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_ERROR_CAUGHT\", {\n    value: \"filesystemscanner.event.error.caught\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_DIRECTORY\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} directory\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_DIRECTORY\", {\n    value: \"filesystemscanner.event.found.directory\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_FILE\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} file\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_FILE\", {\n    value: \"filesystemscanner.event.found.file\"\n});\n\n/**\n * @event JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_PATH\n * @type {object}\n * @property {JsLoader/FileSystem/FileSystemScanner} dispatcher\n * @property {string} path\n */\nObject.defineProperty(FileSystemScanner, \"EVENT_FOUND_PATH\", {\n    value: \"filesystemscanner.event.found.path\"\n});\n\n/**\n * @return {array}\n */\nFileSystemScanner.prototype.getSupportedEvents = function () {\n    return [\n        FileSystemScanner.EVENT_ERROR_CAUGHT,\n        FileSystemScanner.EVENT_FOUND_DIRECTORY,\n        FileSystemScanner.EVENT_FOUND_FILE,\n        FileSystemScanner.EVENT_FOUND_PATH\n    ];\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_DIRECTORY\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyDirectoryFound = function (path) {\n    this.dispatch(FileSystemScanner.EVENT_FOUND_DIRECTORY, {\n        directory: path,\n        dispatcher: this\n    });\n    this.notifyPathFound(path);\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_ERROR_CAUGHT\n * @param {object} err\n * @param {string|void} [path] path that caused the error\n * @return {void}\n */\nFileSystemScanner.prototype.notifyErrorCaught = function (err, path) {\n    this.dispatch(FileSystemScanner.EVENT_ERROR_CAUGHT, {\n        dispatcher: this,\n        err: err,\n        path: path\n    });\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_FILE\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyFileFound = function (path) {\n    this.dispatch(FileSystemScanner.EVENT_FOUND_FILE, {\n        file: path,\n        dispatcher: this\n    });\n    this.notifyPathFound(path);\n};\n\n/**\n * @fires JsLoader/FileSystem/FileSystemScanner#EVENT_FOUND_PATH\n * @param {string} path\n * @return {void}\n */\nFileSystemScanner.prototype.notifyPathFound = function (path) {\n    this.dispatch(FileSystemScanner.EVENT_FOUND_PATH, {\n        dispatcher: this,\n        path: path\n    });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanDirectory = function (path, scanningProcess) {\n    var cb;\n\n    scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n    if (scanningProcess.isDirectoryVisited(path)) {\n        return scanningProcess;\n    }\n\n    scanningProcess.onDirectoryVisited(path);\n\n    cb = onCheckDirectory.bind(null, this, scanningProcess, path, this.fileSystemStrategy);\n    this.scanningStrategy.checkDirectory(path, this.fileSystemStrategy, cb);\n\n    return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanFile = function (path, scanningProcess) {\n    var cb;\n\n    scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n    if (scanningProcess.isFileVisited(path)) {\n        return scanningProcess;\n    }\n\n    scanningProcess.onFileVisited(path);\n\n    if (!this.scanningStrategy.isLookingForFile) {\n        scanningProcess.onPathDone(path);\n\n        return scanningProcess;\n    }\n\n    cb = onCheckFile.bind(null, this, scanningProcess, path, this.fileSystemStrategy);\n    this.scanningStrategy.checkFile(path, this.fileSystemStrategy, cb);\n\n    return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nFileSystemScanner.prototype.scanPath = function (path, scanningProcess) {\n    var cb,\n        fileSystemStrategy = this.fileSystemStrategy,\n        scanningStrategy = this.scanningStrategy,\n        that = this;\n\n    scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n    if (scanningProcess.isPathVisited(path)) {\n        return scanningProcess;\n    }\n    if (!scanningProcess.isExpectingPath(path)) {\n        scanningProcess.expectPath(path);\n    }\n\n    fileSystemStrategy.stat(path, function (stat, err) {\n        if (err) {\n            return void handleError(that, path, scanningProcess, err);\n        }\n\n        if (stat.isDirectory()) {\n            // even if scanning strategy does not look for directory,\n            // directories should be scanned\n            cb = onShouldScanDirectory.bind(null, that, scanningProcess, path, fileSystemStrategy);\n            scanningStrategy.shouldScanDirectory(path, fileSystemStrategy, cb);\n        } else if (stat.isFile()) {\n            // file check must be done because it may also be FIFO, socket,\n            // block device, character device, etc\n            if (scanningStrategy.isLookingForFile) {\n                cb = onShouldScanFile.bind(null, that, scanningProcess, path, fileSystemStrategy);\n                scanningStrategy.shouldScanFile(path, fileSystemStrategy, cb);\n            } else {\n                // filesystem scanner is looking only for directories and this\n                // path contains file at the end so this is a short visit\n                scanningProcess.onFileVisited(path);\n                scanningProcess.onPathDone(path);\n            }\n        }\n    });\n\n    return scanningProcess;\n};\n\n/**\n * @param {array} paths\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if paths list is not an array\n */\nFileSystemScanner.prototype.scanPaths = function (paths, scanningProcess) {\n    var cb,\n        i;\n\n    paths = config.assertArrayEach(config.expectString(), paths);\n    scanningProcess = sanitizeScanningProcess(this, scanningProcess);\n\n    for (i = 0; i < paths.length; i += 1) {\n        if (!scanningProcess.isPathVisited(paths[i]) && !scanningProcess.isExpectingPath(paths[i])) {\n            scanningProcess.expectPath(paths[i]);\n            cb = onShouldScanPath.bind(null, this, scanningProcess, paths[i], this.fileSystemStrategy);\n            this.scanningStrategy.shouldScanPath(paths[i], this.fileSystemStrategy, cb);\n        }\n    }\n\n    return scanningProcess;\n};\n\nmodule.exports = FileSystemScanner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}