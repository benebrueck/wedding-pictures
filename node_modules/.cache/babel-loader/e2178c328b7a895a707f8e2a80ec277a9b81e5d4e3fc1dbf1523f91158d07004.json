{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar ScanningConfiguration = require(__dirname + \"/ScanningConfiguration\"),\n  ScanningBranchAggregator,\n  // constructor, function\n  ScanningBranch = require(__dirname + \"/ScanningBranch\"),\n  TaskAggregator = require(\"flow-inspector\").TaskAggregator,\n  concat; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningBranchAggregator} scanningBranchRepository\n * @param {string} property\n * @return {array}\n */\nconcat = function (scanningBranchRepository, property) {\n  var i,\n    ret = [];\n  for (i = 0; i < scanningBranchRepository.list.length; i += 1) {\n    ret = ret.concat(scanningBranchRepository.list[i][property]);\n  }\n  return ret;\n};\n\n/**\n * @auguments flow-inspector/TaskAggregator\n * @constructor\n * @param {object} [options]\n */\nScanningBranchAggregator = function (options) {\n  TaskAggregator.call(this);\n  this.options = new ScanningConfiguration(options);\n};\nScanningBranchAggregator.prototype = Object.create(TaskAggregator.prototype);\nObject.defineProperties(ScanningBranchAggregator.prototype, {\n  foundDirectories: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"foundDirectories\");\n    }\n  },\n  foundFiles: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"foundFiles\");\n    }\n  },\n  foundPaths: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"foundPaths\");\n    }\n  },\n  visitedDirectories: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"visitedDirectories\");\n    }\n  },\n  visitedFiles: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"visitedFiles\");\n    }\n  },\n  visitedPaths: {\n    enumerable: true,\n    /**\n     * @return {void}\n     */\n    get: function () {\n      return concat(this, \"visitedPaths\");\n    }\n  }\n});\n\n/**\n * @param {JsLoader/FileSystem/ScanningBranch} scanningBranch\n * @return {void}\n */\nScanningBranchAggregator.prototype.isItemAllowed = function (scanningBranch) {\n  return scanningBranch instanceof ScanningBranch;\n};\nmodule.exports = ScanningBranchAggregator;","map":{"version":3,"names":["ScanningConfiguration","require","__dirname","ScanningBranchAggregator","ScanningBranch","TaskAggregator","concat","scanningBranchRepository","property","i","ret","list","length","options","call","prototype","Object","create","defineProperties","foundDirectories","enumerable","get","foundFiles","foundPaths","visitedDirectories","visitedFiles","visitedPaths","isItemAllowed","scanningBranch","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/scripts/JsLoader/FileSystem/ScanningBranchAggregator.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar ScanningConfiguration = require(__dirname + \"/ScanningConfiguration\"),\n    ScanningBranchAggregator, // constructor, function\n    ScanningBranch = require(__dirname + \"/ScanningBranch\"),\n    TaskAggregator = require(\"flow-inspector\").TaskAggregator,\n    concat; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningBranchAggregator} scanningBranchRepository\n * @param {string} property\n * @return {array}\n */\nconcat = function (scanningBranchRepository, property) {\n    var i,\n        ret = [];\n\n    for (i = 0; i < scanningBranchRepository.list.length; i += 1) {\n        ret = ret.concat(scanningBranchRepository.list[i][property]);\n    }\n\n    return ret;\n};\n\n/**\n * @auguments flow-inspector/TaskAggregator\n * @constructor\n * @param {object} [options]\n */\nScanningBranchAggregator = function (options) {\n    TaskAggregator.call(this);\n\n    this.options = new ScanningConfiguration(options);\n};\nScanningBranchAggregator.prototype = Object.create(TaskAggregator.prototype);\n\nObject.defineProperties(ScanningBranchAggregator.prototype, {\n    foundDirectories: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"foundDirectories\");\n        }\n    },\n    foundFiles: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"foundFiles\");\n        }\n    },\n    foundPaths: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"foundPaths\");\n        }\n    },\n    visitedDirectories: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"visitedDirectories\");\n        }\n    },\n    visitedFiles: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"visitedFiles\");\n        }\n    },\n    visitedPaths: {\n        enumerable: true,\n\n        /**\n         * @return {void}\n         */\n        get: function () {\n            return concat(this, \"visitedPaths\");\n        }\n    }\n});\n\n/**\n * @param {JsLoader/FileSystem/ScanningBranch} scanningBranch\n * @return {void}\n */\nScanningBranchAggregator.prototype.isItemAllowed = function (scanningBranch) {\n    return scanningBranch instanceof ScanningBranch;\n};\n\nmodule.exports = ScanningBranchAggregator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,qBAAqB,GAAGC,OAAO,CAACC,SAAS,GAAG,wBAAwB,CAAC;EACrEC,wBAAwB;EAAE;EAC1BC,cAAc,GAAGH,OAAO,CAACC,SAAS,GAAG,iBAAiB,CAAC;EACvDG,cAAc,GAAGJ,OAAO,CAAC,gBAAgB,CAAC,CAACI,cAAc;EACzDC,MAAM,CAAC,CAAC;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,GAAG,SAAAA,CAAUC,wBAAwB,EAAEC,QAAQ,EAAE;EACnD,IAAIC,CAAC;IACDC,GAAG,GAAG,EAAE;EAEZ,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,wBAAwB,CAACI,IAAI,CAACC,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;IAC1DC,GAAG,GAAGA,GAAG,CAACJ,MAAM,CAACC,wBAAwB,CAACI,IAAI,CAACF,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC;EAChE;EAEA,OAAOE,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAP,wBAAwB,GAAG,SAAAA,CAAUU,OAAO,EAAE;EAC1CR,cAAc,CAACS,IAAI,CAAC,IAAI,CAAC;EAEzB,IAAI,CAACD,OAAO,GAAG,IAAIb,qBAAqB,CAACa,OAAO,CAAC;AACrD,CAAC;AACDV,wBAAwB,CAACY,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACZ,cAAc,CAACU,SAAS,CAAC;AAE5EC,MAAM,CAACE,gBAAgB,CAACf,wBAAwB,CAACY,SAAS,EAAE;EACxDI,gBAAgB,EAAE;IACdC,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,kBAAkB,CAAC;IAC3C;EACJ,CAAC;EACDgB,UAAU,EAAE;IACRF,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC;IACrC;EACJ,CAAC;EACDiB,UAAU,EAAE;IACRH,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC;IACrC;EACJ,CAAC;EACDkB,kBAAkB,EAAE;IAChBJ,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC;IAC7C;EACJ,CAAC;EACDmB,YAAY,EAAE;IACVL,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC;IACvC;EACJ,CAAC;EACDoB,YAAY,EAAE;IACVN,UAAU,EAAE,IAAI;IAEhB;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOf,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC;IACvC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAH,wBAAwB,CAACY,SAAS,CAACY,aAAa,GAAG,UAAUC,cAAc,EAAE;EACzE,OAAOA,cAAc,YAAYxB,cAAc;AACnD,CAAC;AAEDyB,MAAM,CAACC,OAAO,GAAG3B,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}