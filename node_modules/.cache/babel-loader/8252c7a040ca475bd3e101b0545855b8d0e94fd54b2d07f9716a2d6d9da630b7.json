{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar EventDispatcher = require(\"event-dispatcher\").EventDispatcher,\n  ScanningConfiguration = require(__dirname + \"/ScanningConfiguration\"),\n  ScanningBranch = require(__dirname + \"/ScanningBranch\"),\n  ScanningBranchAggregator = require(__dirname + \"/ScanningBranchAggregator\"),\n  ScanningProcess,\n  // constructor, function\n  config = require(\"configuration-processor\").configurationProcessor,\n  getOrSpawnBranch,\n  // private, function\n  onPathStop,\n  // private, function\n  onPathVisited,\n  // private, function\n  spawnBranch; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\ngetOrSpawnBranch = function (scanningProcess, path) {\n  path = config.assertString(path);\n  if (scanningProcess.hasBranch(path)) {\n    return scanningProcess.getBranch(path);\n  }\n  return spawnBranch(scanningProcess);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningBranch} branch\n * @return {void}\n */\nonPathStop = function (scanningProcess, path, branch) {\n  if (scanningProcess.isStopped() && !scanningProcess.isExpectingAnyPath()) {\n    scanningProcess.notifyStop();\n  }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningBranch} branch\n * @return {void}\n */\nonPathVisited = function (scanningProcess, path, branch) {\n  if (scanningProcess.isExpectingPath(path)) {\n    scanningProcess.unexpectPath(path);\n  }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\nspawnBranch = function (scanningProcess) {\n  var branch = new ScanningBranch(scanningProcess.options);\n  scanningProcess.branches.add(branch);\n  branch.start();\n  return branch;\n};\n\n/**\n * @auguments event-dispatcher/EventDispatcher\n * @constructor\n * @param {object} [options]\n */\nScanningProcess = function (options) {\n  EventDispatcher.call(this);\n  this.branches = new ScanningBranchAggregator(options);\n  this.expectedPaths = {};\n  this.options = new ScanningConfiguration(options);\n};\nScanningProcess.prototype = Object.create(EventDispatcher.prototype);\n\n/**\n * @event JsLoader/FileSystem/ScanningProcess#EVENT_STOP\n * @type {object}\n * @property {JsLoader/FileSystem/ScanningProcess} dispatcher\n * @property {array} foundDirectories\n * @property {array} foundFiles\n * @property {array} foundPaths\n * @property {array} visitedDirectories\n * @property {array} visitedFiles\n * @property {array} visitedPaths\n */\nObject.defineProperty(ScanningProcess, \"EVENT_STOP\", {\n  enumerable: true,\n  value: \"scanning_process.event.done\"\n});\nObject.defineProperties(ScanningProcess.prototype, {\n  foundDirectories: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.foundDirectories;\n    }\n  },\n  foundFiles: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.foundFiles;\n    }\n  },\n  foundPaths: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.foundPaths;\n    }\n  },\n  visitedDirectories: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.visitedDirectories;\n    }\n  },\n  visitedFiles: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.visitedFiles;\n    }\n  },\n  visitedPaths: {\n    enumerable: true,\n    /**\n     * @return {array}\n     */\n    get: function () {\n      return this.branches.visitedPaths;\n    }\n  }\n});\n\n/**\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\nScanningProcess.prototype.getBranch = function (path) {\n  var branch,\n    branches = this.branches.list,\n    deadParent,\n    i;\n  for (i = 0; i < branches.length; i += 1) {\n    branch = branches[i];\n    if (branch.coversPath(path)) {\n      if (branch.isStopped()) {\n        deadParent = true;\n      } else {\n        return branch;\n      }\n    }\n  }\n  if (deadParent && this.expectedPaths[path]) {\n    // this situation may occur when scanning multiple paths or\n    // scanning same branch multiple times using same scanning process\n    // and current path's parent branch is stopped\n    return spawnBranch(this);\n  }\n  throw new Error(\"There is no active branch that covers path: \" + path);\n};\n\n/**\n * @param {function} listener\n * @return {void}\n */\nScanningProcess.prototype.addListenerDone = function (listener) {\n  this.addListener(ScanningProcess.EVENT_STOP, listener);\n};\n\n/**\n * @param {string} path\n * @return {void}\n * @throws {Error} if path is already expected\n */\nScanningProcess.prototype.expectPath = function (path) {\n  if (this.isExpectingPath(path)) {\n    throw new Error(\"Path is already expected: \" + path);\n  }\n  this.expectedPaths[path] = true;\n};\n\n/**\n * @return {array}\n */\nScanningProcess.prototype.getSupportedEvents = function () {\n  return [ScanningProcess.EVENT_STOP];\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.hasBranch = function (path) {\n  path = config.assertString(path);\n  return this.branches.list.some(function (branch) {\n    return branch.coversPath(path);\n  });\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.isExpectingAnyPath = function () {\n  var property;\n  for (property in this.expectedPaths) {\n    if (this.expectedPaths.hasOwnProperty(property)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isExpectingPath = function (path) {\n  path = config.assertString(path);\n  return !!this.expectedPaths[path];\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.isStopped = function () {\n  return !this.isExpectingAnyPath() && this.branches.isEveryStopped();\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isDirectoryVisited = function (path) {\n  return -1 !== this.visitedDirectories.indexOf(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isFileVisited = function (path) {\n  return -1 !== this.visitedFiles.indexOf(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isPathVisited = function (path) {\n  return -1 !== this.visitedPaths.indexOf(path);\n};\n\n/**\n * @return {void}\n */\nScanningProcess.prototype.notifyStop = function () {\n  this.dispatch(ScanningProcess.EVENT_STOP, {\n    foundDirectories: this.foundDirectories,\n    foundFiles: this.foundFiles,\n    foundPaths: this.foundPaths,\n    visitedDirectories: this.visitedDirectories,\n    visitedFiles: this.visitedFiles,\n    visitedPaths: this.visitedPaths\n  });\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onDirectoryFound = function (path) {\n  var branch = getOrSpawnBranch(this, path);\n  branch.foundDirectories.push(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onDirectoryVisited = function (path) {\n  var branch = getOrSpawnBranch(this, path);\n  branch.visitedDirectories.push(path);\n  onPathVisited(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onFileFound = function (path) {\n  var branch = getOrSpawnBranch(this, path);\n  branch.foundFiles.push(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onFileVisited = function (path) {\n  var branch = getOrSpawnBranch(this, path);\n  branch.visitedFiles.push(path);\n  onPathVisited(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onPathDone = function (path) {\n  var branch = this.getBranch(path);\n  branch.done();\n  onPathStop(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onPathFailed = function (path) {\n  var branch = this.getBranch(path);\n  branch.fail();\n  onPathStop(this, path, branch);\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.shouldStop = function () {\n  if (this.isStopped() || 0 === this.options.limit) {\n    return false;\n  }\n  return this.foundPaths.length >= this.options.limit;\n};\n\n/**\n * @param {string} path\n * @return {bool}\n * @throws {Error} if path is not expected to be visited\n */\nScanningProcess.prototype.unexpectPath = function (path) {\n  if (!this.isExpectingPath(path)) {\n    throw new Error(\"Path is not expected to be visited: \" + path);\n  }\n  delete this.expectedPaths[path];\n};\nmodule.exports = ScanningProcess;","map":{"version":3,"names":["EventDispatcher","require","ScanningConfiguration","__dirname","ScanningBranch","ScanningBranchAggregator","ScanningProcess","config","configurationProcessor","getOrSpawnBranch","onPathStop","onPathVisited","spawnBranch","scanningProcess","path","assertString","hasBranch","getBranch","branch","isStopped","isExpectingAnyPath","notifyStop","isExpectingPath","unexpectPath","options","branches","add","start","call","expectedPaths","prototype","Object","create","defineProperty","enumerable","value","defineProperties","foundDirectories","get","foundFiles","foundPaths","visitedDirectories","visitedFiles","visitedPaths","list","deadParent","i","length","coversPath","Error","addListenerDone","listener","addListener","EVENT_STOP","expectPath","getSupportedEvents","some","property","hasOwnProperty","isEveryStopped","isDirectoryVisited","indexOf","isFileVisited","isPathVisited","dispatch","onDirectoryFound","push","onDirectoryVisited","onFileFound","onFileVisited","onPathDone","done","onPathFailed","fail","shouldStop","limit","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/scripts/JsLoader/FileSystem/ScanningProcess.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar EventDispatcher = require(\"event-dispatcher\").EventDispatcher,\n    ScanningConfiguration = require(__dirname + \"/ScanningConfiguration\"),\n    ScanningBranch = require(__dirname + \"/ScanningBranch\"),\n    ScanningBranchAggregator = require(__dirname + \"/ScanningBranchAggregator\"),\n    ScanningProcess, // constructor, function\n    config = require(\"configuration-processor\").configurationProcessor,\n    getOrSpawnBranch, // private, function\n    onPathStop, // private, function\n    onPathVisited, // private, function\n    spawnBranch; // private, function\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\ngetOrSpawnBranch = function (scanningProcess, path) {\n    path = config.assertString(path);\n\n    if (scanningProcess.hasBranch(path)) {\n        return scanningProcess.getBranch(path);\n    }\n\n    return spawnBranch(scanningProcess);\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningBranch} branch\n * @return {void}\n */\nonPathStop = function (scanningProcess, path, branch) {\n    if (scanningProcess.isStopped() && !scanningProcess.isExpectingAnyPath()) {\n        scanningProcess.notifyStop();\n    }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningBranch} branch\n * @return {void}\n */\nonPathVisited = function (scanningProcess, path, branch) {\n    if (scanningProcess.isExpectingPath(path)) {\n        scanningProcess.unexpectPath(path);\n    }\n};\n\n/**\n * @access private\n * @param {JsLoader/FileSystem/ScanningProcess} scanningProcess\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\nspawnBranch = function (scanningProcess) {\n    var branch = new ScanningBranch(scanningProcess.options);\n\n    scanningProcess.branches.add(branch);\n    branch.start();\n\n    return branch;\n};\n\n/**\n * @auguments event-dispatcher/EventDispatcher\n * @constructor\n * @param {object} [options]\n */\nScanningProcess = function (options) {\n    EventDispatcher.call(this);\n\n    this.branches = new ScanningBranchAggregator(options);\n    this.expectedPaths = {};\n    this.options = new ScanningConfiguration(options);\n};\nScanningProcess.prototype = Object.create(EventDispatcher.prototype);\n\n/**\n * @event JsLoader/FileSystem/ScanningProcess#EVENT_STOP\n * @type {object}\n * @property {JsLoader/FileSystem/ScanningProcess} dispatcher\n * @property {array} foundDirectories\n * @property {array} foundFiles\n * @property {array} foundPaths\n * @property {array} visitedDirectories\n * @property {array} visitedFiles\n * @property {array} visitedPaths\n */\nObject.defineProperty(ScanningProcess, \"EVENT_STOP\", {\n    enumerable: true,\n    value: \"scanning_process.event.done\"\n});\n\nObject.defineProperties(ScanningProcess.prototype, {\n    foundDirectories: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.foundDirectories;\n        }\n    },\n    foundFiles: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.foundFiles;\n        }\n    },\n    foundPaths: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.foundPaths;\n        }\n    },\n    visitedDirectories: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.visitedDirectories;\n        }\n    },\n    visitedFiles: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.visitedFiles;\n        }\n    },\n    visitedPaths: {\n        enumerable: true,\n\n        /**\n         * @return {array}\n         */\n        get: function () {\n            return this.branches.visitedPaths;\n        }\n    }\n});\n\n/**\n * @param {string} path\n * @return {JsLoader/FileSystem/ScanningBranch}\n */\nScanningProcess.prototype.getBranch = function (path) {\n    var branch,\n        branches = this.branches.list,\n        deadParent,\n        i;\n\n    for (i = 0; i < branches.length; i += 1) {\n        branch = branches[i];\n        if (branch.coversPath(path)) {\n            if (branch.isStopped()) {\n                deadParent = true;\n            } else {\n                return branch;\n            }\n        }\n    }\n\n    if (deadParent && this.expectedPaths[path]) {\n        // this situation may occur when scanning multiple paths or\n        // scanning same branch multiple times using same scanning process\n        // and current path's parent branch is stopped\n        return spawnBranch(this);\n    }\n\n    throw new Error(\"There is no active branch that covers path: \" + path);\n};\n\n/**\n * @param {function} listener\n * @return {void}\n */\nScanningProcess.prototype.addListenerDone = function (listener) {\n    this.addListener(ScanningProcess.EVENT_STOP, listener);\n};\n\n/**\n * @param {string} path\n * @return {void}\n * @throws {Error} if path is already expected\n */\nScanningProcess.prototype.expectPath = function (path) {\n    if (this.isExpectingPath(path)) {\n        throw new Error(\"Path is already expected: \" + path);\n    }\n\n    this.expectedPaths[path] = true;\n};\n\n/**\n * @return {array}\n */\nScanningProcess.prototype.getSupportedEvents = function () {\n    return [\n        ScanningProcess.EVENT_STOP\n    ];\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.hasBranch = function (path) {\n    path = config.assertString(path);\n\n    return this.branches.list.some(function (branch) {\n        return branch.coversPath(path);\n    });\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.isExpectingAnyPath = function () {\n    var property;\n\n    for (property in this.expectedPaths) {\n        if (this.expectedPaths.hasOwnProperty(property)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isExpectingPath = function (path) {\n    path = config.assertString(path);\n\n    return !!this.expectedPaths[path];\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.isStopped = function () {\n    return !this.isExpectingAnyPath() && this.branches.isEveryStopped();\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isDirectoryVisited = function (path) {\n    return -1 !== this.visitedDirectories.indexOf(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isFileVisited = function (path) {\n    return -1 !== this.visitedFiles.indexOf(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.isPathVisited = function (path) {\n    return -1 !== this.visitedPaths.indexOf(path);\n};\n\n/**\n * @return {void}\n */\nScanningProcess.prototype.notifyStop = function () {\n    this.dispatch(ScanningProcess.EVENT_STOP, {\n        foundDirectories: this.foundDirectories,\n        foundFiles: this.foundFiles,\n        foundPaths: this.foundPaths,\n        visitedDirectories: this.visitedDirectories,\n        visitedFiles: this.visitedFiles,\n        visitedPaths: this.visitedPaths\n    });\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onDirectoryFound = function (path) {\n    var branch = getOrSpawnBranch(this, path);\n\n    branch.foundDirectories.push(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onDirectoryVisited = function (path) {\n    var branch = getOrSpawnBranch(this, path);\n\n    branch.visitedDirectories.push(path);\n\n    onPathVisited(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onFileFound = function (path) {\n    var branch = getOrSpawnBranch(this, path);\n\n    branch.foundFiles.push(path);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onFileVisited = function (path) {\n    var branch = getOrSpawnBranch(this, path);\n\n    branch.visitedFiles.push(path);\n\n    onPathVisited(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onPathDone = function (path) {\n    var branch = this.getBranch(path);\n\n    branch.done();\n\n    onPathStop(this, path, branch);\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nScanningProcess.prototype.onPathFailed = function (path) {\n    var branch = this.getBranch(path);\n\n    branch.fail();\n\n    onPathStop(this, path, branch);\n};\n\n/**\n * @return {bool}\n */\nScanningProcess.prototype.shouldStop = function () {\n    if (this.isStopped() || 0 === this.options.limit) {\n        return false;\n    }\n\n    return this.foundPaths.length >= this.options.limit;\n};\n\n/**\n * @param {string} path\n * @return {bool}\n * @throws {Error} if path is not expected to be visited\n */\nScanningProcess.prototype.unexpectPath = function (path) {\n    if (!this.isExpectingPath(path)) {\n        throw new Error(\"Path is not expected to be visited: \" + path);\n    }\n\n    delete this.expectedPaths[path];\n};\n\nmodule.exports = ScanningProcess;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}