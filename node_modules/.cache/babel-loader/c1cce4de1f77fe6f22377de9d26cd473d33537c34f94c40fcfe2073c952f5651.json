{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar FileSystemScanner = require(__dirname + \"/../FileSystemScanner\"),\n  Remembering,\n  // constructor, function\n  config = require(\"configuration-processor\").configurationProcessor;\n\n/**\n * @auguments JsLoader/FileSystem/FileSystemScanner\n * @constructor\n * @param {JsLoader/FileSystem/ScanningStrategy} scanningStrategy\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n */\nRemembering = function (scanningStrategy, fileSystemStrategy) {\n  FileSystemScanner.call(this, scanningStrategy, fileSystemStrategy);\n  this.scannedDirectories = {};\n  this.scannedFiles = {};\n  this.scannedPaths = {};\n};\nRemembering.prototype = Object.create(FileSystemScanner.prototype);\n\n/**\n * @param {string} directory\n * @return {bool}\n */\nRemembering.prototype.isDirectoryScanned = function (directory) {\n  return !!this.scannedDirectories[directory];\n};\n\n/**\n * @param {string} file\n * @return {bool}\n */\nRemembering.prototype.isFileScanned = function (file) {\n  return !!this.scannedFiles[file];\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nRemembering.prototype.isPathScanned = function (path) {\n  return !!this.scannedPaths[path];\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanDirectory = function (path, scanningProcess) {\n  if (this.scannedDirectories[path]) {\n    return this.scannedDirectories[path];\n  }\n  scanningProcess = FileSystemScanner.prototype.scanDirectory.call(this, path, scanningProcess);\n  this.scannedDirectories[path] = scanningProcess;\n  this.scannedPaths[path] = scanningProcess;\n  return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanFile = function (path, scanningProcess) {\n  if (this.scannedFiles[path]) {\n    return this.scannedFiles[path];\n  }\n  scanningProcess = FileSystemScanner.prototype.scanFile.call(this, path, scanningProcess);\n  this.scannedFiles[path] = scanningProcess;\n  this.scannedPaths[path] = scanningProcess;\n  return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanPath = function (path, scanningProcess) {\n  if (this.scannedPaths[path]) {\n    return this.scannedPaths[path];\n  }\n  scanningProcess = FileSystemScanner.prototype.scanPath.call(this, path, scanningProcess);\n  this.scannedPaths[path] = scanningProcess;\n  return scanningProcess;\n};\n\n/**\n * @param {array} paths\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if paths list is not an array\n */\nRemembering.prototype.scanPaths = function (paths, scanningProcess) {\n  paths = config.assertArrayEach(config.expectString(), paths);\n  paths = paths.filter(function (path, index, paths) {\n    return !this.scannedPaths[path];\n  }, this);\n  return FileSystemScanner.prototype.scanPaths.call(this, paths, scanningProcess);\n};\nmodule.exports = Remembering;","map":{"version":3,"names":["FileSystemScanner","require","__dirname","Remembering","config","configurationProcessor","scanningStrategy","fileSystemStrategy","call","scannedDirectories","scannedFiles","scannedPaths","prototype","Object","create","isDirectoryScanned","directory","isFileScanned","file","isPathScanned","path","scanDirectory","scanningProcess","scanFile","scanPath","scanPaths","paths","assertArrayEach","expectString","filter","index","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/scripts/JsLoader/FileSystem/FileSystemScanner/Remembering.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar FileSystemScanner = require(__dirname + \"/../FileSystemScanner\"),\n    Remembering, // constructor, function\n    config = require(\"configuration-processor\").configurationProcessor;\n\n/**\n * @auguments JsLoader/FileSystem/FileSystemScanner\n * @constructor\n * @param {JsLoader/FileSystem/ScanningStrategy} scanningStrategy\n * @param {JsLoader/FileSystem/FileSystemStrategy} fileSystemStrategy\n */\nRemembering = function (scanningStrategy, fileSystemStrategy) {\n    FileSystemScanner.call(this, scanningStrategy, fileSystemStrategy);\n\n    this.scannedDirectories = {};\n    this.scannedFiles = {};\n    this.scannedPaths = {};\n};\nRemembering.prototype = Object.create(FileSystemScanner.prototype);\n\n/**\n * @param {string} directory\n * @return {bool}\n */\nRemembering.prototype.isDirectoryScanned = function (directory) {\n    return !!this.scannedDirectories[directory];\n};\n\n/**\n * @param {string} file\n * @return {bool}\n */\nRemembering.prototype.isFileScanned = function (file) {\n    return !!this.scannedFiles[file];\n};\n\n/**\n * @param {string} path\n * @return {bool}\n */\nRemembering.prototype.isPathScanned = function (path) {\n    return !!this.scannedPaths[path];\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanDirectory = function (path, scanningProcess) {\n    if (this.scannedDirectories[path]) {\n        return this.scannedDirectories[path];\n    }\n\n    scanningProcess = FileSystemScanner.prototype.scanDirectory.call(this, path, scanningProcess);\n\n    this.scannedDirectories[path] = scanningProcess;\n    this.scannedPaths[path] = scanningProcess;\n\n    return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanFile = function (path, scanningProcess) {\n    if (this.scannedFiles[path]) {\n        return this.scannedFiles[path];\n    }\n\n    scanningProcess = FileSystemScanner.prototype.scanFile.call(this, path, scanningProcess);\n\n    this.scannedFiles[path] = scanningProcess;\n    this.scannedPaths[path] = scanningProcess;\n\n    return scanningProcess;\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n */\nRemembering.prototype.scanPath = function (path, scanningProcess) {\n    if (this.scannedPaths[path]) {\n        return this.scannedPaths[path];\n    }\n\n    scanningProcess = FileSystemScanner.prototype.scanPath.call(this, path, scanningProcess);\n    this.scannedPaths[path] = scanningProcess;\n\n    return scanningProcess;\n};\n\n/**\n * @param {array} paths\n * @param {JsLoader/FileSystem/ScanningProcess} [scanningProcess]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if paths list is not an array\n */\nRemembering.prototype.scanPaths = function (paths, scanningProcess) {\n    paths = config.assertArrayEach(config.expectString(), paths);\n    paths = paths.filter(function (path, index, paths) {\n        return !this.scannedPaths[path];\n    }, this);\n\n    return FileSystemScanner.prototype.scanPaths.call(this, paths, scanningProcess);\n};\n\nmodule.exports = Remembering;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,iBAAiB,GAAGC,OAAO,CAACC,SAAS,GAAG,uBAAuB,CAAC;EAChEC,WAAW;EAAE;EACbC,MAAM,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACI,sBAAsB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACAF,WAAW,GAAG,SAAAA,CAAUG,gBAAgB,EAAEC,kBAAkB,EAAE;EAC1DP,iBAAiB,CAACQ,IAAI,CAAC,IAAI,EAAEF,gBAAgB,EAAEC,kBAAkB,CAAC;EAElE,IAAI,CAACE,kBAAkB,GAAG,CAAC,CAAC;EAC5B,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;EACtB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;AAC1B,CAAC;AACDR,WAAW,CAACS,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACd,iBAAiB,CAACY,SAAS,CAAC;;AAElE;AACA;AACA;AACA;AACAT,WAAW,CAACS,SAAS,CAACG,kBAAkB,GAAG,UAAUC,SAAS,EAAE;EAC5D,OAAO,CAAC,CAAC,IAAI,CAACP,kBAAkB,CAACO,SAAS,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACAb,WAAW,CAACS,SAAS,CAACK,aAAa,GAAG,UAAUC,IAAI,EAAE;EAClD,OAAO,CAAC,CAAC,IAAI,CAACR,YAAY,CAACQ,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACAf,WAAW,CAACS,SAAS,CAACO,aAAa,GAAG,UAAUC,IAAI,EAAE;EAClD,OAAO,CAAC,CAAC,IAAI,CAACT,YAAY,CAACS,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,WAAW,CAACS,SAAS,CAACS,aAAa,GAAG,UAAUD,IAAI,EAAEE,eAAe,EAAE;EACnE,IAAI,IAAI,CAACb,kBAAkB,CAACW,IAAI,CAAC,EAAE;IAC/B,OAAO,IAAI,CAACX,kBAAkB,CAACW,IAAI,CAAC;EACxC;EAEAE,eAAe,GAAGtB,iBAAiB,CAACY,SAAS,CAACS,aAAa,CAACb,IAAI,CAAC,IAAI,EAAEY,IAAI,EAAEE,eAAe,CAAC;EAE7F,IAAI,CAACb,kBAAkB,CAACW,IAAI,CAAC,GAAGE,eAAe;EAC/C,IAAI,CAACX,YAAY,CAACS,IAAI,CAAC,GAAGE,eAAe;EAEzC,OAAOA,eAAe;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnB,WAAW,CAACS,SAAS,CAACW,QAAQ,GAAG,UAAUH,IAAI,EAAEE,eAAe,EAAE;EAC9D,IAAI,IAAI,CAACZ,YAAY,CAACU,IAAI,CAAC,EAAE;IACzB,OAAO,IAAI,CAACV,YAAY,CAACU,IAAI,CAAC;EAClC;EAEAE,eAAe,GAAGtB,iBAAiB,CAACY,SAAS,CAACW,QAAQ,CAACf,IAAI,CAAC,IAAI,EAAEY,IAAI,EAAEE,eAAe,CAAC;EAExF,IAAI,CAACZ,YAAY,CAACU,IAAI,CAAC,GAAGE,eAAe;EACzC,IAAI,CAACX,YAAY,CAACS,IAAI,CAAC,GAAGE,eAAe;EAEzC,OAAOA,eAAe;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnB,WAAW,CAACS,SAAS,CAACY,QAAQ,GAAG,UAAUJ,IAAI,EAAEE,eAAe,EAAE;EAC9D,IAAI,IAAI,CAACX,YAAY,CAACS,IAAI,CAAC,EAAE;IACzB,OAAO,IAAI,CAACT,YAAY,CAACS,IAAI,CAAC;EAClC;EAEAE,eAAe,GAAGtB,iBAAiB,CAACY,SAAS,CAACY,QAAQ,CAAChB,IAAI,CAAC,IAAI,EAAEY,IAAI,EAAEE,eAAe,CAAC;EACxF,IAAI,CAACX,YAAY,CAACS,IAAI,CAAC,GAAGE,eAAe;EAEzC,OAAOA,eAAe;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAnB,WAAW,CAACS,SAAS,CAACa,SAAS,GAAG,UAAUC,KAAK,EAAEJ,eAAe,EAAE;EAChEI,KAAK,GAAGtB,MAAM,CAACuB,eAAe,CAACvB,MAAM,CAACwB,YAAY,CAAC,CAAC,EAAEF,KAAK,CAAC;EAC5DA,KAAK,GAAGA,KAAK,CAACG,MAAM,CAAC,UAAUT,IAAI,EAAEU,KAAK,EAAEJ,KAAK,EAAE;IAC/C,OAAO,CAAC,IAAI,CAACf,YAAY,CAACS,IAAI,CAAC;EACnC,CAAC,EAAE,IAAI,CAAC;EAER,OAAOpB,iBAAiB,CAACY,SAAS,CAACa,SAAS,CAACjB,IAAI,CAAC,IAAI,EAAEkB,KAAK,EAAEJ,eAAe,CAAC;AACnF,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAG7B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}