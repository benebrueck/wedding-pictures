{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar Asynchronous,\n  // constructor, function\n  FileSystemStrategy = require(__dirname + \"/../FileSystemStrategy\"),\n  fs = require(\"fs\");\n\n/**\n * @auguments JsLoader/FileSystem/FileSystemStrategy\n * @constructor\n */\nAsynchronous = function () {\n  FileSystemStrategy.call(this);\n};\nAsynchronous.prototype = Object.create(FileSystemStrategy.prototype);\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~existsCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.exists = function (path, callback) {\n  fs.exists(path, function (exists) {\n    callback(exists);\n  });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~readDirCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.readDir = function (path, callback) {\n  fs.readdir(path, function (err, files) {\n    callback(files, err);\n  });\n};\n\n/**\n * @param {string} path\n * @param {object} options\n * @param {JsLoader/FileSystem/FileSystemStrategy~readFileCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.readFile = function (path, options, callback) {\n  fs.readFile(path, options, function (err, content) {\n    callback(content, err);\n  });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~realpathCallback} callback\n * @return {void}\n * @throws {Error}\n */\nAsynchronous.prototype.realpath = function (path, callback) {\n  fs.realpath(path, function (err, realpath) {\n    callback(realpath, err);\n  });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~statCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.stat = function (path, callback) {\n  fs.stat(path, function (err, stat) {\n    callback(stat, err);\n  });\n};\nmodule.exports = Asynchronous;","map":{"version":3,"names":["Asynchronous","FileSystemStrategy","require","__dirname","fs","call","prototype","Object","create","exists","path","callback","readDir","readdir","err","files","readFile","options","content","realpath","stat","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/scripts/JsLoader/FileSystem/FileSystemStrategy/Asynchronous.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar Asynchronous, // constructor, function\n    FileSystemStrategy = require(__dirname + \"/../FileSystemStrategy\"),\n    fs = require(\"fs\");\n\n/**\n * @auguments JsLoader/FileSystem/FileSystemStrategy\n * @constructor\n */\nAsynchronous = function () {\n    FileSystemStrategy.call(this);\n};\nAsynchronous.prototype = Object.create(FileSystemStrategy.prototype);\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~existsCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.exists = function (path, callback) {\n    fs.exists(path, function (exists) {\n        callback(exists);\n    });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~readDirCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.readDir = function (path, callback) {\n    fs.readdir(path, function (err, files) {\n        callback(files, err);\n    });\n};\n\n/**\n * @param {string} path\n * @param {object} options\n * @param {JsLoader/FileSystem/FileSystemStrategy~readFileCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.readFile = function (path, options, callback) {\n    fs.readFile(path, options, function (err, content) {\n        callback(content, err);\n    });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~realpathCallback} callback\n * @return {void}\n * @throws {Error}\n */\nAsynchronous.prototype.realpath = function (path, callback) {\n    fs.realpath(path, function (err, realpath) {\n        callback(realpath, err);\n    });\n};\n\n/**\n * @param {string} path\n * @param {JsLoader/FileSystem/FileSystemStrategy~statCallback} callback\n * @return {void}\n */\nAsynchronous.prototype.stat = function (path, callback) {\n    fs.stat(path, function (err, stat) {\n        callback(stat, err);\n    });\n};\n\nmodule.exports = Asynchronous;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,YAAY;EAAE;EACdC,kBAAkB,GAAGC,OAAO,CAACC,SAAS,GAAG,wBAAwB,CAAC;EAClEC,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;;AAEtB;AACA;AACA;AACA;AACAF,YAAY,GAAG,SAAAA,CAAA,EAAY;EACvBC,kBAAkB,CAACI,IAAI,CAAC,IAAI,CAAC;AACjC,CAAC;AACDL,YAAY,CAACM,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACP,kBAAkB,CAACK,SAAS,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACAN,YAAY,CAACM,SAAS,CAACG,MAAM,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;EACtDP,EAAE,CAACK,MAAM,CAACC,IAAI,EAAE,UAAUD,MAAM,EAAE;IAC9BE,QAAQ,CAACF,MAAM,CAAC;EACpB,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAT,YAAY,CAACM,SAAS,CAACM,OAAO,GAAG,UAAUF,IAAI,EAAEC,QAAQ,EAAE;EACvDP,EAAE,CAACS,OAAO,CAACH,IAAI,EAAE,UAAUI,GAAG,EAAEC,KAAK,EAAE;IACnCJ,QAAQ,CAACI,KAAK,EAAED,GAAG,CAAC;EACxB,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAd,YAAY,CAACM,SAAS,CAACU,QAAQ,GAAG,UAAUN,IAAI,EAAEO,OAAO,EAAEN,QAAQ,EAAE;EACjEP,EAAE,CAACY,QAAQ,CAACN,IAAI,EAAEO,OAAO,EAAE,UAAUH,GAAG,EAAEI,OAAO,EAAE;IAC/CP,QAAQ,CAACO,OAAO,EAAEJ,GAAG,CAAC;EAC1B,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAd,YAAY,CAACM,SAAS,CAACa,QAAQ,GAAG,UAAUT,IAAI,EAAEC,QAAQ,EAAE;EACxDP,EAAE,CAACe,QAAQ,CAACT,IAAI,EAAE,UAAUI,GAAG,EAAEK,QAAQ,EAAE;IACvCR,QAAQ,CAACQ,QAAQ,EAAEL,GAAG,CAAC;EAC3B,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAd,YAAY,CAACM,SAAS,CAACc,IAAI,GAAG,UAAUV,IAAI,EAAEC,QAAQ,EAAE;EACpDP,EAAE,CAACgB,IAAI,CAACV,IAAI,EAAE,UAAUI,GAAG,EAAEM,IAAI,EAAE;IAC/BT,QAAQ,CAACS,IAAI,EAAEN,GAAG,CAAC;EACvB,CAAC,CAAC;AACN,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAGtB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}