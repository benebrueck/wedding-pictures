{"ast":null,"code":"var _jsxFileName = \"/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/src/App.js\",\n  _s2 = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useRef } from \"react\";\nimport { storage } from \"./firebase\";\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { Camera } from \"react-camera-pro\";\nimport { v4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Component = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const ImageConverter = () => {\n    _s();\n    const [imagefile, setImagefile] = useState(null);\n\n    // Funktion zum Konvertieren der Binärdaten in ein Bild\n    const convertToImage = image => {\n      // Annahme: Die Binärdaten sind im JPEG-Format (MIME-Typ entsprechend anpassen)\n      const mimeType = 'image/jpeg';\n\n      // Konvertiere die Binärdaten in ein Blob-Objekt\n      const blob = new Blob([image], {\n        type: mimeType\n      });\n\n      // Erstelle eine temporäre URL für das Blob-Objekt und setze sie als Bild-URL\n      const imagefile = URL.createObjectURL(blob);\n      setImagefile(imagefile);\n    };\n  };\n  _s(ImageConverter, \"QxnacIH2MhDxEUcZNlqo4n7SmD4=\");\n  const camera = useRef(null);\n  const [image, setImage] = useState(null);\n  const uploadImage = () => {\n    if (image == null) return;\n    // Speicherort\n    const imageRef = ref(storage, `test1/${image.name + v4()}`);\n    convertToImage(image);\n    uploadBytes(imageRef, imagefile).then(() => {\n      alert(\"Bild hochgeladen\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Camera, {\n      ref: camera,\n      aspectRatio: 9 / 16\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setImage(camera.current.takePhoto()),\n      children: \"Take photo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => camera.current.switchCamera(),\n      children: \"Switch Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadImage,\n      children: \"Upload photo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Taken photo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s2(Component, \"wth0xvKzmBBgz+Ozzi0o8YzxRlU=\");\n_c = Component;\nexport default Component;\nvar _c;\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"names":["React","useState","useRef","storage","ref","uploadBytes","Camera","v4","jsxDEV","_jsxDEV","Component","_s2","_s","$RefreshSig$","ImageConverter","imagefile","setImagefile","convertToImage","image","mimeType","blob","Blob","type","URL","createObjectURL","camera","setImage","uploadImage","imageRef","name","then","alert","children","aspectRatio","fileName","_jsxFileName","lineNumber","columnNumber","onClick","current","takePhoto","switchCamera","src","alt","_c","$RefreshReg$"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useRef } from \"react\";\nimport { storage } from \"./firebase\";\nimport { ref, uploadBytes} from \"firebase/storage\";\nimport { Camera } from \"react-camera-pro\";\nimport { v4 } from \"uuid\";\n\n\n\nconst Component = () => {\n  const ImageConverter = () => {\n    const [imagefile, setImagefile] = useState(null);\n  \n    // Funktion zum Konvertieren der Binärdaten in ein Bild\n    const convertToImage = (image) => {\n      // Annahme: Die Binärdaten sind im JPEG-Format (MIME-Typ entsprechend anpassen)\n      const mimeType = 'image/jpeg';\n  \n      // Konvertiere die Binärdaten in ein Blob-Objekt\n      const blob = new Blob([image], { type: mimeType });\n  \n      // Erstelle eine temporäre URL für das Blob-Objekt und setze sie als Bild-URL\n      const imagefile = URL.createObjectURL(blob);\n      setImagefile(imagefile);\n    };\n  };\n\n  const camera = useRef(null);\n  const [image, setImage] = useState(null);\n\n  const uploadImage = () =>{\n    if (image==null) return;\n    // Speicherort\n    const imageRef = ref(storage,`test1/${image.name + v4()}`);\n    convertToImage(image)\n    uploadBytes(imageRef,imagefile).then(()=>{\n      alert(\"Bild hochgeladen\");\n    });\n  }\n\n  return (\n    <div>\n      <Camera ref={camera} aspectRatio={9/16}/>\n      <button onClick={() => setImage(camera.current.takePhoto())}>Take photo</button>\n      <button onClick={()=> camera.current.switchCamera()}>Switch Camera</button>\n      <button onClick={uploadImage}>Upload photo</button>\n      <img src={image} alt='Taken photo'/>\n    </div>\n  );\n}\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}