{"ast":null,"code":"/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar AsynchronousFileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy/Asynchronous\"),\n  DirectoryScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern/Directory\"),\n  FileScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern/File\"),\n  FileSystemScanner = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemScanner\"),\n  FileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy\"),\n  PatternScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern\"),\n  RememberingFileSystemScanner = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemScanner/Remembering\"),\n  ScanningConfiguration = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningConfiguration\"),\n  ScanningResult = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningResult\"),\n  ScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy\"),\n  SynchronousFileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy/Synchronous\"),\n  asynchronousFileSystemStrategy = new AsynchronousFileSystemStrategy(),\n  config = require(\"configuration-processor\").configurationProcessor,\n  doScanPath,\n  // private, function\n  doScanPathSync,\n  // private, function\n  optimizeScanningStrategy,\n  // private, function\n  sanitizeCallback,\n  // private, function\n  sanitizeOptions,\n  // private, function\n  sanitizePath,\n  // private, function\n  scanPath,\n  // function\n  scanPathSync,\n  // function\n  synchronousFileSystemStrategy = new SynchronousFileSystemStrategy();\n\n/**\n * @access private\n * @param {object} options\n * @return {JsLoader/FileSystem/ScanningStrategy}\n * @throws {Error}\n */\noptimizeScanningStrategy = function (options) {\n  if (!options.isLookingForDirectory && !options.isLookingForFile) {\n    throw new Error(\"Configuration indicates that you are not looking for directory nor file.\");\n  }\n  if (options.isLookingForDirectory && options.isLookingForFile) {\n    return new PatternScanningStrategy(options.pattern);\n  }\n  if (options.isLookingForDirectory && !options.isLookingForFile) {\n    return new DirectoryScanningStrategy(options.pattern);\n  }\n  return new FileScanningStrategy(options.pattern);\n};\n\n/**\n * @callback {scannerCallback}\n * @param {JsLoader/FileSystem/ScanningProcess#EVENT_DONE} evt\n */\n\n/**\n * @access private\n * @param {string} path\n * @param {object} options\n * @param {scannerCallback} [callback]\n * @return {void}\n */\ndoScanPath = function (path, options, callback) {\n  var fileSystemScanner = new FileSystemScanner(optimizeScanningStrategy(options), asynchronousFileSystemStrategy),\n    scanningProcess;\n  scanningProcess = fileSystemScanner.scanPath(path, options);\n  if (callback) {\n    scanningProcess.addListenerDone(function (evt) {\n      callback(evt);\n    });\n  }\n  return scanningProcess;\n};\n\n/**\n * @access private\n * @param {string} path\n * @param {object} options\n * @return {array}\n * @throws {Error}\n */\ndoScanPathSync = function (path, options) {\n  var fileSystemScanner = new FileSystemScanner(optimizeScanningStrategy(options), synchronousFileSystemStrategy);\n  return fileSystemScanner.scanPath(path);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} callback\n * @return {funtion}\n */\nsanitizeCallback = function (callback) {\n  return config.assertFunction(callback);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} options\n * @return {JsLoader/FileSystem/ScanningConfiguration}\n */\nsanitizeOptions = function (options) {\n  if (options instanceof RegExp || \"string\" === typeof options) {\n    options = {\n      pattern: options\n    };\n  } else if (!options) {\n    options = {};\n  }\n  return new ScanningConfiguration(options);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} path\n * @return {object}\n * @throws {Error} if given path is not a string\n */\nsanitizePath = function (path) {\n  return config.assertString(path);\n};\n\n/**\n * @access public\n * @param {string} path\n * @param {object} [options]\n * @param {scannerCallback} [callback]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if invalid number of arguments given\n */\nscanPath = function (path, arg2, arg3) {\n  switch (arguments.length) {\n    case 1:\n      return doScanPath(sanitizePath(path), sanitizeOptions({}));\n    case 2:\n      return doScanPath(sanitizePath(path), sanitizeOptions({}), sanitizeCallback(arg2));\n    case 3:\n      return doScanPath(sanitizePath(path), sanitizeOptions(arg2), sanitizeCallback(arg3));\n  }\n  throw new Error(\"This function takes at least one argument.\");\n};\n\n/**\n * @access public\n * @param {string} path\n * @param {object} [options]\n * @return {array}\n */\nscanPathSync = function (path, options) {\n  return doScanPathSync(sanitizePath(path), sanitizeOptions(options));\n};\nmodule.exports = {\n  // classess\n  AsynchronousFileSystemStrategy: AsynchronousFileSystemStrategy,\n  DirectoryScanningStrategy: DirectoryScanningStrategy,\n  FileScanningStrategy: FileScanningStrategy,\n  FileSystemScanner: FileSystemScanner,\n  FileSystemStrategy: FileSystemStrategy,\n  PatternScanningStrategy: PatternScanningStrategy,\n  RememberingFileSystemScanner: RememberingFileSystemScanner,\n  ScanningResult: ScanningResult,\n  ScanningStrategy: ScanningStrategy,\n  SynchronousFileSystemStrategy: SynchronousFileSystemStrategy,\n  // functions\n  scanPath: scanPath,\n  scanPathSync: scanPathSync\n};","map":{"version":3,"names":["AsynchronousFileSystemStrategy","require","__dirname","DirectoryScanningStrategy","FileScanningStrategy","FileSystemScanner","FileSystemStrategy","PatternScanningStrategy","RememberingFileSystemScanner","ScanningConfiguration","ScanningResult","ScanningStrategy","SynchronousFileSystemStrategy","asynchronousFileSystemStrategy","config","configurationProcessor","doScanPath","doScanPathSync","optimizeScanningStrategy","sanitizeCallback","sanitizeOptions","sanitizePath","scanPath","scanPathSync","synchronousFileSystemStrategy","options","isLookingForDirectory","isLookingForFile","Error","pattern","path","callback","fileSystemScanner","scanningProcess","addListenerDone","evt","assertFunction","RegExp","assertString","arg2","arg3","arguments","length","module","exports"],"sources":["/Users/benediktbrueck/Documents/Programmieren/wedding/wedding-pictures/node_modules/filesystem/libraries/modules/filesystem.js"],"sourcesContent":["/**\n * @license Copyright (c) 2013, CKSource - Frederico Knabben\n * For licensing, see LICENSE\n */\n\n\"use strict\";\n\nvar AsynchronousFileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy/Asynchronous\"),\n    DirectoryScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern/Directory\"),\n    FileScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern/File\"),\n    FileSystemScanner = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemScanner\"),\n    FileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy\"),\n    PatternScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy/Pattern\"),\n    RememberingFileSystemScanner = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemScanner/Remembering\"),\n    ScanningConfiguration = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningConfiguration\"),\n    ScanningResult = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningResult\"),\n    ScanningStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/ScanningStrategy\"),\n    SynchronousFileSystemStrategy = require(__dirname + \"/../scripts/JsLoader/FileSystem/FileSystemStrategy/Synchronous\"),\n    asynchronousFileSystemStrategy = new AsynchronousFileSystemStrategy(),\n    config = require(\"configuration-processor\").configurationProcessor,\n    doScanPath, // private, function\n    doScanPathSync, // private, function\n    optimizeScanningStrategy, // private, function\n    sanitizeCallback, // private, function\n    sanitizeOptions, // private, function\n    sanitizePath, // private, function\n    scanPath, // function\n    scanPathSync, // function\n    synchronousFileSystemStrategy = new SynchronousFileSystemStrategy();\n\n/**\n * @access private\n * @param {object} options\n * @return {JsLoader/FileSystem/ScanningStrategy}\n * @throws {Error}\n */\noptimizeScanningStrategy = function (options) {\n    if (!options.isLookingForDirectory && !options.isLookingForFile) {\n        throw new Error(\"Configuration indicates that you are not looking for directory nor file.\");\n    }\n\n    if (options.isLookingForDirectory && options.isLookingForFile) {\n        return new PatternScanningStrategy(options.pattern);\n    }\n\n    if (options.isLookingForDirectory && !options.isLookingForFile) {\n        return new DirectoryScanningStrategy(options.pattern);\n    }\n\n    return new FileScanningStrategy(options.pattern);\n};\n\n/**\n * @callback {scannerCallback}\n * @param {JsLoader/FileSystem/ScanningProcess#EVENT_DONE} evt\n */\n\n/**\n * @access private\n * @param {string} path\n * @param {object} options\n * @param {scannerCallback} [callback]\n * @return {void}\n */\ndoScanPath = function (path, options, callback) {\n    var fileSystemScanner = new FileSystemScanner(optimizeScanningStrategy(options), asynchronousFileSystemStrategy),\n        scanningProcess;\n\n    scanningProcess = fileSystemScanner.scanPath(path, options);\n\n    if (callback) {\n        scanningProcess.addListenerDone(function (evt) {\n            callback(evt);\n        });\n    }\n\n    return scanningProcess;\n};\n\n/**\n * @access private\n * @param {string} path\n * @param {object} options\n * @return {array}\n * @throws {Error}\n */\ndoScanPathSync = function (path, options) {\n    var fileSystemScanner = new FileSystemScanner(optimizeScanningStrategy(options), synchronousFileSystemStrategy);\n\n    return fileSystemScanner.scanPath(path);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} callback\n * @return {funtion}\n */\nsanitizeCallback = function (callback) {\n    return config.assertFunction(callback);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} options\n * @return {JsLoader/FileSystem/ScanningConfiguration}\n */\nsanitizeOptions = function (options) {\n    if (options instanceof RegExp || \"string\" === typeof options) {\n        options = {\n            pattern: options\n        };\n    } else if (!options) {\n        options = {};\n    }\n\n    return new ScanningConfiguration(options);\n};\n\n/**\n * This function processess direct module user input.\n *\n * @access private\n * @param {mixed} path\n * @return {object}\n * @throws {Error} if given path is not a string\n */\nsanitizePath = function (path) {\n    return config.assertString(path);\n};\n\n/**\n * @access public\n * @param {string} path\n * @param {object} [options]\n * @param {scannerCallback} [callback]\n * @return {JsLoader/FileSystem/ScanningProcess}\n * @throws {Error} if invalid number of arguments given\n */\nscanPath = function (path, arg2, arg3) {\n    switch (arguments.length) {\n    case 1:\n        return doScanPath(sanitizePath(path), sanitizeOptions({}));\n    case 2:\n        return doScanPath(sanitizePath(path), sanitizeOptions({}), sanitizeCallback(arg2));\n    case 3:\n        return doScanPath(sanitizePath(path), sanitizeOptions(arg2), sanitizeCallback(arg3));\n    }\n\n    throw new Error(\"This function takes at least one argument.\");\n};\n\n/**\n * @access public\n * @param {string} path\n * @param {object} [options]\n * @return {array}\n */\nscanPathSync = function (path, options) {\n    return doScanPathSync(sanitizePath(path), sanitizeOptions(options));\n};\n\nmodule.exports = {\n    // classess\n    AsynchronousFileSystemStrategy: AsynchronousFileSystemStrategy,\n    DirectoryScanningStrategy: DirectoryScanningStrategy,\n    FileScanningStrategy: FileScanningStrategy,\n    FileSystemScanner: FileSystemScanner,\n    FileSystemStrategy: FileSystemStrategy,\n    PatternScanningStrategy: PatternScanningStrategy,\n    RememberingFileSystemScanner: RememberingFileSystemScanner,\n    ScanningResult: ScanningResult,\n    ScanningStrategy: ScanningStrategy,\n    SynchronousFileSystemStrategy: SynchronousFileSystemStrategy,\n\n    // functions\n    scanPath: scanPath,\n    scanPathSync: scanPathSync\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,8BAA8B,GAAGC,OAAO,CAACC,SAAS,GAAG,iEAAiE,CAAC;EACvHC,yBAAyB,GAAGF,OAAO,CAACC,SAAS,GAAG,oEAAoE,CAAC;EACrHE,oBAAoB,GAAGH,OAAO,CAACC,SAAS,GAAG,+DAA+D,CAAC;EAC3GG,iBAAiB,GAAGJ,OAAO,CAACC,SAAS,GAAG,mDAAmD,CAAC;EAC5FI,kBAAkB,GAAGL,OAAO,CAACC,SAAS,GAAG,oDAAoD,CAAC;EAC9FK,uBAAuB,GAAGN,OAAO,CAACC,SAAS,GAAG,0DAA0D,CAAC;EACzGM,4BAA4B,GAAGP,OAAO,CAACC,SAAS,GAAG,+DAA+D,CAAC;EACnHO,qBAAqB,GAAGR,OAAO,CAACC,SAAS,GAAG,uDAAuD,CAAC;EACpGQ,cAAc,GAAGT,OAAO,CAACC,SAAS,GAAG,gDAAgD,CAAC;EACtFS,gBAAgB,GAAGV,OAAO,CAACC,SAAS,GAAG,kDAAkD,CAAC;EAC1FU,6BAA6B,GAAGX,OAAO,CAACC,SAAS,GAAG,gEAAgE,CAAC;EACrHW,8BAA8B,GAAG,IAAIb,8BAA8B,CAAC,CAAC;EACrEc,MAAM,GAAGb,OAAO,CAAC,yBAAyB,CAAC,CAACc,sBAAsB;EAClEC,UAAU;EAAE;EACZC,cAAc;EAAE;EAChBC,wBAAwB;EAAE;EAC1BC,gBAAgB;EAAE;EAClBC,eAAe;EAAE;EACjBC,YAAY;EAAE;EACdC,QAAQ;EAAE;EACVC,YAAY;EAAE;EACdC,6BAA6B,GAAG,IAAIZ,6BAA6B,CAAC,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACAM,wBAAwB,GAAG,SAAAA,CAAUO,OAAO,EAAE;EAC1C,IAAI,CAACA,OAAO,CAACC,qBAAqB,IAAI,CAACD,OAAO,CAACE,gBAAgB,EAAE;IAC7D,MAAM,IAAIC,KAAK,CAAC,0EAA0E,CAAC;EAC/F;EAEA,IAAIH,OAAO,CAACC,qBAAqB,IAAID,OAAO,CAACE,gBAAgB,EAAE;IAC3D,OAAO,IAAIpB,uBAAuB,CAACkB,OAAO,CAACI,OAAO,CAAC;EACvD;EAEA,IAAIJ,OAAO,CAACC,qBAAqB,IAAI,CAACD,OAAO,CAACE,gBAAgB,EAAE;IAC5D,OAAO,IAAIxB,yBAAyB,CAACsB,OAAO,CAACI,OAAO,CAAC;EACzD;EAEA,OAAO,IAAIzB,oBAAoB,CAACqB,OAAO,CAACI,OAAO,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,UAAU,GAAG,SAAAA,CAAUc,IAAI,EAAEL,OAAO,EAAEM,QAAQ,EAAE;EAC5C,IAAIC,iBAAiB,GAAG,IAAI3B,iBAAiB,CAACa,wBAAwB,CAACO,OAAO,CAAC,EAAEZ,8BAA8B,CAAC;IAC5GoB,eAAe;EAEnBA,eAAe,GAAGD,iBAAiB,CAACV,QAAQ,CAACQ,IAAI,EAAEL,OAAO,CAAC;EAE3D,IAAIM,QAAQ,EAAE;IACVE,eAAe,CAACC,eAAe,CAAC,UAAUC,GAAG,EAAE;MAC3CJ,QAAQ,CAACI,GAAG,CAAC;IACjB,CAAC,CAAC;EACN;EAEA,OAAOF,eAAe;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,cAAc,GAAG,SAAAA,CAAUa,IAAI,EAAEL,OAAO,EAAE;EACtC,IAAIO,iBAAiB,GAAG,IAAI3B,iBAAiB,CAACa,wBAAwB,CAACO,OAAO,CAAC,EAAED,6BAA6B,CAAC;EAE/G,OAAOQ,iBAAiB,CAACV,QAAQ,CAACQ,IAAI,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,gBAAgB,GAAG,SAAAA,CAAUY,QAAQ,EAAE;EACnC,OAAOjB,MAAM,CAACsB,cAAc,CAACL,QAAQ,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,eAAe,GAAG,SAAAA,CAAUK,OAAO,EAAE;EACjC,IAAIA,OAAO,YAAYY,MAAM,IAAI,QAAQ,KAAK,OAAOZ,OAAO,EAAE;IAC1DA,OAAO,GAAG;MACNI,OAAO,EAAEJ;IACb,CAAC;EACL,CAAC,MAAM,IAAI,CAACA,OAAO,EAAE;IACjBA,OAAO,GAAG,CAAC,CAAC;EAChB;EAEA,OAAO,IAAIhB,qBAAqB,CAACgB,OAAO,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,YAAY,GAAG,SAAAA,CAAUS,IAAI,EAAE;EAC3B,OAAOhB,MAAM,CAACwB,YAAY,CAACR,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,QAAQ,GAAG,SAAAA,CAAUQ,IAAI,EAAES,IAAI,EAAEC,IAAI,EAAE;EACnC,QAAQC,SAAS,CAACC,MAAM;IACxB,KAAK,CAAC;MACF,OAAO1B,UAAU,CAACK,YAAY,CAACS,IAAI,CAAC,EAAEV,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,KAAK,CAAC;MACF,OAAOJ,UAAU,CAACK,YAAY,CAACS,IAAI,CAAC,EAAEV,eAAe,CAAC,CAAC,CAAC,CAAC,EAAED,gBAAgB,CAACoB,IAAI,CAAC,CAAC;IACtF,KAAK,CAAC;MACF,OAAOvB,UAAU,CAACK,YAAY,CAACS,IAAI,CAAC,EAAEV,eAAe,CAACmB,IAAI,CAAC,EAAEpB,gBAAgB,CAACqB,IAAI,CAAC,CAAC;EACxF;EAEA,MAAM,IAAIZ,KAAK,CAAC,4CAA4C,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAL,YAAY,GAAG,SAAAA,CAAUO,IAAI,EAAEL,OAAO,EAAE;EACpC,OAAOR,cAAc,CAACI,YAAY,CAACS,IAAI,CAAC,EAAEV,eAAe,CAACK,OAAO,CAAC,CAAC;AACvE,CAAC;AAEDkB,MAAM,CAACC,OAAO,GAAG;EACb;EACA5C,8BAA8B,EAAEA,8BAA8B;EAC9DG,yBAAyB,EAAEA,yBAAyB;EACpDC,oBAAoB,EAAEA,oBAAoB;EAC1CC,iBAAiB,EAAEA,iBAAiB;EACpCC,kBAAkB,EAAEA,kBAAkB;EACtCC,uBAAuB,EAAEA,uBAAuB;EAChDC,4BAA4B,EAAEA,4BAA4B;EAC1DE,cAAc,EAAEA,cAAc;EAC9BC,gBAAgB,EAAEA,gBAAgB;EAClCC,6BAA6B,EAAEA,6BAA6B;EAE5D;EACAU,QAAQ,EAAEA,QAAQ;EAClBC,YAAY,EAAEA;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}